import http.client
import json
from datetime import datetime
import csv
import os.path
import sys

SECURE_API_TOKEN = "5cec641a-1c29-46d5-a9e6-75c4cc9f27f7"
url = "/secure/vulnerability/v1beta1/runtime-results"
#filterProd = "?filter=not%20kubernetes.cluster.name%20contains%20%22pre%22"
filterProd = "?filter=not%20kubernetes.cluster.name%20contains%20%22pre%22%20and%20not%20kubernetes.cluster.name%20contains%20%22dev%22"
filterPre = "?filter=%20kubernetes.cluster.name%20contains%20%22pre%22%20and%20not%20kubernetes.cluster.name%20contains%20%22dev%22"
global jsonDataList
jsonDataList = []
pagina = 0
numberOfItems = 0
environmentType = '0'

# Função de log para arquivo e console
def log(data):
    logExists = os.path.isdir("logs")
    if logExists == False:
        os.mkdir("logs")

    if os.path.isfile("logs/log_"+str(datetime.today().strftime('%Y-%m-%d'))+".txt"):
        file = open("logs/log_"+str(datetime.today().strftime('%Y-%m-%d'))+".txt", 'a', encoding='UTF8', newline='')
    else:
        file = open("logs/log_"+str(datetime.today().strftime('%Y-%m-%d'))+".txt", 'w', encoding='UTF8', newline='')
    file.write(data + "\n")
    print(data)
    file.close()

# Valida se pasta outputs já existe ou se deve criar   
def validateFolderExists(folder):
    # Verifica se já existe a pasta 'outputs' para armazenamento dos dados de saída
    if os.path.isdir(folder):
        log(str(datetime.now()) + " | Pasta '"+ folder +"' identificada...")
    else:
        os.mkdir(folder)
        log(str(datetime.now()) + " | Pasta '"+ folder +"' criada...")

# Function para fazer requisição ao endpoint da Sysdig
def reqGetVulnerabilityResultsList(url_, jsonDataList_):
    headers = {
        "Authorization":"Bearer " + SECURE_API_TOKEN,
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate, sdch",
        "Content-Type": "application/json;charset=UTF-8"
    }
    nextPage = ""
    global pagina
    pagina += 1
    
    conn = http.client.HTTPSConnection("us2.app.sysdig.com")
    log(str(datetime.now()) + " | Iniciando request ao ambiente Sysdig...")
    conn.request("GET", url_, headers = headers)
    res = conn.getresponse()
    jsonResp = json.loads(res.read().decode("utf-8"))
    global numberOfItems
    numberOfItems += len(jsonResp["data"])
    log(str(datetime.now()) + " | REQUEST: Get vulnerability results list" + " - Pagina " + str(pagina) + " - Número de itens: " + str(numberOfItems) + "/" + str(jsonResp["page"]["total"]))
    log(str(datetime.now()) + " | RESPONSE: " + str(res.status) + " - " + str(res.reason))
    
    if "page" in jsonResp and "next" in jsonResp["page"]:
        nextPage = jsonResp["page"]["next"]
        jsonDataList_ += jsonResp["data"]
        reqGetVulnerabilityResultsList(url + "&cursor=" + nextPage, jsonDataList_)
    else:
        jsonDataList_ += jsonResp["data"]
        return jsonDataList_

# Function para escrever os dados no arquivo de saída
def writeOutputFile(jsonResp):
    fileType = input("Selecione o tipo de arquivo de saída - [1] json / [2] csv: ")
    log("Opção selecionada: " + fileType)

    validateFolderExists("outputs")

    if fileType == "1":
        # Verifica se já existe arquivo ou se deve criar um novo
        if os.path.isfile("outputs/getVulnerabilityResultsList.json"):

            # Verifica se já possui dados para a data corrente para bloquear duplicação de dados
            #file = open('outputs/getVulnerabilityResultsList.csv', 'r', encoding='UTF8', errors="ignore")
            #final_line = file.readlines()[-1]

            log(str(datetime.now()) + " | Arquivo encontrado. Iniciando modo append...")
            file = open('outputs/getVulnerabilityResultsList.json', 'a', encoding='UTF8', newline='')
            
        else:
            log(str(datetime.now()) + " | Arquivo não encontrado. Iniciando modo write...")
            file = open('outputs/getVulnerabilityResultsList.json', 'w', encoding='UTF8', newline='')

    elif fileType == "2":
        # Verifica se já existe arquivo ou se deve criar um novo
        if os.path.isfile("outputs/getVulnerabilityResultsList.csv"):

            # Verifica se já possui dados para a data corrente para bloquear duplicação de dados
            file = open('outputs/getVulnerabilityResultsList.csv', 'r', encoding='UTF8', errors="ignore")
            final_line = file.readlines()[-1]
            if final_line[:10] == str(datetime.today().strftime('%Y-%m-%d')):
                log(str(datetime.now()) + " | Arquivo já contém dados para a data atual")
                input("Pressione qualquer tecla para concluir...")
                sys.exit()
            else:
                log(str(datetime.now()) + " | Arquivo encontrado. Iniciando modo append...")
                file = open('outputs/getVulnerabilityResultsList.csv', 'a', encoding='UTF8', newline='')
                writer = csv.writer(file)
        else:
            log(str(datetime.now()) + " | Arquivo não encontrado. Iniciando modo write...")
            file = open('outputs/getVulnerabilityResultsList.csv', 'w', encoding='UTF8', newline='')
            writer = csv.writer(file)
            writer.writerow(["Data/hora", "ClusterName", "ContainerName", "Critical", "High", "Medium", "Low"])

    else:
        log(str(datetime.now()) + " | Opção inválida")
        input("Pressione qualquer tecla para concluir...")
        sys.exit()

    currentDateTime = str(datetime.today().strftime('%Y-%m-%d'))
    clusterName = ""
    containerName = ""
    criticalVuln = 0
    highVuln = 0
    mediumVuln = 0
    lowVuln = 0
    jsonObj = []

    for item in jsonResp:
        if item.get('vulnTotalBySeverity') != None:
            currentScope = item["scope"]
            clusterName = currentScope["kubernetes.cluster.name"]

            # Selecionado ambiente de prod
            if environmentType == '2':
                if "pre" not in clusterName:
                    containerName = currentScope["kubernetes.pod.container.name"]
                    currentItem = item["vulnTotalBySeverity"]
                    criticalVuln = currentItem["critical"]
                    highVuln = currentItem["high"]
                    mediumVuln = currentItem["medium"]
                    lowVuln = currentItem["low"]

                    if fileType == "1":
                        jsonObj.append({
                            "date" : currentDateTime,
                            "clusterName": clusterName,
                            "containerName": containerName,
                            "critical": criticalVuln,
                            "high": highVuln,
                            "medium": mediumVuln,
                            "low": lowVuln
                        })

                    elif fileType == "2":
                        writer.writerow([currentDateTime, clusterName, containerName, criticalVuln, highVuln, mediumVuln, lowVuln])

            # Selecionado ambiente de pre-prod
            elif environmentType == '1':
                if "pre" in clusterName:
                    containerName = currentScope["kubernetes.pod.container.name"]
                    currentItem = item["vulnTotalBySeverity"]
                    criticalVuln = currentItem["critical"]
                    highVuln = currentItem["high"]
                    mediumVuln = currentItem["medium"]
                    lowVuln = currentItem["low"]

                    if fileType == "1":
                        jsonObj.append({
                            "date" : currentDateTime,
                            "clusterName": clusterName,
                            "containerName": containerName,
                            "critical": criticalVuln,
                            "high": highVuln,
                            "medium": mediumVuln,
                            "low": lowVuln
                        })

                    elif fileType == "2":
                        writer.writerow([currentDateTime, clusterName, containerName, criticalVuln, highVuln, mediumVuln, lowVuln])

    if fileType == "1":
        file.write(json.dumps(jsonObj, indent=4))
    
    file.close()

# Function para receber o input do usuário sobre qual o ambiente de coleta
def getEnvironmentType(url):
    
    global environmentType
    while environmentType != '1' and environmentType != '2':
        environmentType = input("Deseja dados de pre-prod ou prod ? - [1] pre-prod / [2] prod: ")
        

        if environmentType != '1' and environmentType != '2':
            log(str(datetime.now()) + " | Opção inválida")
        elif environmentType == '1':
            url += filterPre
            log("Opção selecionada: pre-prod")
        else:
            url += filterProd
            log("Opção selecionada: prod")
    return url

################ Execução ###########################
url = getEnvironmentType(url)
reqGetVulnerabilityResultsList(url, jsonDataList)
writeOutputFile(jsonDataList)
log(str(datetime.now()) + " | Arquivo csv gerado com sucesso no caminho: '/outputs/getVulnerabilityResultsList.csv'")
input("Pressione qualquer tecla para concluir...")
################ Fim ################################